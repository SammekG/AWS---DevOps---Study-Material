-> Declarative Language
	- declare with what you want?
	- negligible chances of error 
	- statefull language

1) Ansible
- it's open source automation tool that allow/manage user to automate IT Infra.
- configuration management tool (Ansible, puppet, chef, .... etc)
- ssh with linux
- WinRm with windows
- yaml
- keep chnaging config
- patching any type config change
- python modules
- inventory file (grouping)
- python version should be 2.7 or higher (below 2.7 failed the ansible)

-> Advantages
- Agent less
- Push module technology (setup is first module to be push - gathering facts)
- light weight
- easy

-> Data serialization language
- XML
- JSON
- YAML

-> Ansible Tower (GUI based) - paid

-> Systems Manager (in AWS)

-> Inventory file :
- it's a plane text file to add manage node ip hostname and group

-> ansible.cfg
- it's store authentication authorization of inventory file

-> add these in /etc/hosts file
172.31.3.78 ansibleserver.radical.com
172.31.5.109 node1.radical.com
172.31.9.159 node2.radical.com

-> Inventory file
node_server ansible_host=192.168.213.136 ansible_ssh_pass=redhat

hostnamectl status --static
hostnamectl set-hostname node_server

cd /etc/yum.repos.d/

----------------------------------------
#vim base.repo

[BaseOS]
name= This is file based BaeOSrepo
baseurl= file:///mnt/BaseOS
gpgcheck= 0
enabled= 1


[AppStream]
name= This is file based BaseOSrepo
baseurl= file:///mnt/AppStream
gpgcheck= 0
enabled= 1
----------------------------------------

#yum clean all
#yum repolist all

#scp -r base.repo root@192.168.213.136:/etc/yum.repos.d
#scp -r base.repo root@172.31.9.159:/etc/yum.repos.d

#scp -r /etc/hosts root@192.168.213.136:/etc/hosts
#scp -r /etc/hosts root@172.31.9.159:/etc/hosts

#subscription-manager register

#yum info ansible*
#yum search ansible*
#yum install -y ansible-core.x86_64

#ansible --version

#python3 --version
---------------------
#vim inventory
[web]
192.168.213.133
192.168.213.134

------------------
#vim ansible.cfg
[defaults]
inventory = /root/project/inventory
roles_path = /root/project/roles
remote_user = root

[privilege_escalation]
become=false
become_method= sudo
become_user= root
become_ask_pass= false
-----------------------------

#ansible web -m ping


 # mkdir /root/test/mycollections
 # ansible-galaxy collection install ansible-posix-1.4.0.tar.gz -p /root/test_project/mycollections
 # ansible-galaxy collection install community-general-6.1.0.tar.gz -p /root/test_project/mycollections
 # ansible-galaxy collection list
 

-> Ad-Hoc Command
- to run single task in remote machine

#ansible web -m command -a 'df -hT'

#ansible web -m command -a 'hostnamectl' -k
- if we add -k in last then it will ask password

#ansible web -m yum -a 'name=httpd state=present'
- to install httpd package

#ansible 192.168.213.133 -m yum -a 'name=httpd state=present'
-> in node1 : #rpm -qa httpd

----------------------------------
#vim user.yml
---
- name: This play to add user with name roy
  host:	web 
  tasks:
	- name: to add user roy
	  user: 
		 name: roy
		 state: present
------------------------------------

#ansible-playbook user.yml --syntax-check
- to check syntax

-> YAML Line
	yamllint.com
	
#ansible-playbook user.yml -C
	- to try run playbook (just for test-it wont reflect)

#ansible-playbook user.yml
	- to run playbook and reflect 
	
----------------------------------
#vim user.yml
---
- name: This play to add user with name roy
  host:	web 
  tasks:
	- name: to add user sam
	  user: 
		 name: sam
		 state: present
		 
	- name: to add group with name HR
	  group:
		 name: HR
		 state: present
------------------------------------

#ansible-playbook user.yml
	- to run playbook and reflect 
	
	
-> In root create file :
# vi .vimrc
set ai
set tabstop=2
set expandtab
set cursorcolumn

#source .vimrc




-> Declarative Language
	- declare with what you want?
	- negligible chances of error 
	- statefull language
	
-> Why Ansibl?
- Provisioning
- Configuration Management
- Continues Delivery
- Application Deployment
- Security Compliance

-> Advantages
- Simple
- Powerful
- Agentless

1) Ansible
- it's open source automation tool that allow/manage user to automate IT Infra.
- configuration management tool (Ansible, puppet, chef, .... etc)
- ssh with linux
- WinRm with windows
- yaml
- keep chnaging config
- patching any type config cnange
- python modules
- inventory file (grouping)
- python version should be 2.7 or higher (below 2.7 failed the ansible)

-> Advantages
- Agent less
- Push module technology (setup is first module to be push - gathering facts)
- light weight
- easy

-> Data serialization language
- XML
- JSON
- YAML

-> Ansible Tower (GUI based) - paid

-> Systems Manager (in AWS)

-> Inventory file :
- it's a plane text file to add manage node ip hostname and group

-> ansible.cfg
- it's store authentication authorization of inventory file

-> Ansible Configuration Files
- Default configuration file :
	- /etc/ansible/ansible.cfg

-> Section in ansible config file :
- [defaults]
- [inventory]
- [privilage_escalation]
- [paramiko_connection]
- [ssh_connection]
- [persistent_connection]
- [colors]

-> View Configuration 
- List all configuration
	- #ansible-config list
- Shows the current config file
	- #ansible-config view
- Show the current settings
	- #ansible-config dump
	
-> YAML Syntax
-- Key Value Pair
Fruit: Apple
Vegitable: Carrot
Liquid: Water

-- Array/Lists
Fruits:
-	Orange
-	Apple
-	Banana

Vegitable
-	Carrot
-	Cauliflower
-	Tomato

-- Dictionary/Map
Banana:
	Calories: 105
	Fat: 0.4g
	Carbs: 27g

Grapes:
	Calories: 62
	Fat: 0.3g
	Carbs: 16g

-- Dictionary in Dictionary
Color: Blue
Model:
	Name: Corvette
	Year: 1995
Transition:	Manual
Price: $20,000

-- List of Dictionaries
- Color: Blue
  Model:
	 Name: Corvette
	 Year: 1995
  Transition:	Manual
  Price: $20,000
  
- Color: Red
  Model:
	 Name: Corvette
	 Year: 1995
  Transition:	Manual
  Price: $20,000
  
-> Ansible Inventory
- Default Inventory file :
	- /etc/ansible/hosts

- Inventory Parameters:
	- ansible_host - hostname/ip address
	- ansibe_connection - ssh/winrm/localhost
	- ansible_port - 22/5986
	- ansible_user - root/administrator
	- ansible_ssh_pass - Password

--------------------------------------------

- e.g.: Inventory File

# Sample Inventory File

# Web Servers
web1 ansible_host=server1.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!
web2 ansible_host=server2.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!
web3 ansible_host=server3.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!
db1 ansible_host=server4.company.com ansible_connection=winrm ansible_user=administrator ansible_password=Dbp@ss123!

------ Group ------

# Web Servers
web1 ansible_host=server1.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!
web2 ansible_host=server2.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!
web3 ansible_host=server3.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!

# Database Servers
db1 ansible_host=server4.company.com ansible_connection=winrm ansible_user=administrator ansible_password=Password123!


[web_servers]
web1
web2
web3

[db_servers]
db1

------ group of groups ------

# Sample Inventory File

# Web Servers
web1 ansible_host=server1.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!
web2 ansible_host=server2.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!
web3 ansible_host=server3.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!

# Database Servers
db1 ansible_host=server4.company.com ansible_connection=winrm ansible_user=administrator ansible_password=Password123!


[web_servers]
web1
web2
web3

[db_servers]
db1

[all_servers:children]
web_servers
db_servers


------ grouping servers ------

# Sample Inventory File

# Web Servers
web_node1 ansible_host=web01.xyz.com ansible_connection=winrm ansible_user=administrator ansible_password=Win$Pass
web_node2 ansible_host=web02.xyz.com ansible_connection=winrm ansible_user=administrator ansible_password=Win$Pass
web_node3 ansible_host=web03.xyz.com ansible_connection=winrm ansible_user=administrator ansible_password=Win$Pass

# DB Servers
sql_db1 ansible_host=sql01.xyz.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Lin$Pass
sql_db2 ansible_host=sql02.xyz.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Lin$Pass

# Groups
[db_nodes]
sql_db1
sql_db2

[web_nodes]
web_node1
web_node2
web_node3

[boston_nodes]
sql_db1
web_node1

[dallas_nodes]
sql_db2
web_node2
web_node3

[us_nodes:children]
boston_nodes
dallas_nodes

--------------------------------------------

# if there is no host server only having local then use:
localhost ansible_connection=localhost


-> Ansible Variables
- store information that varies with each host

- {{        }}   -> Jinja2 Templeting

- Variable Precidence

---  BASIC ---
1) Group Vars
2) Host Vars
3) Play Vars
4) Extra Vars

--- All Precedence ---

1	command line values (for example, -u my_user, these are not variables)
2	role defaults (as defined in Role directory structure) 1
3	inventory file or script group vars 2
4	inventory group_vars/all 3
5	playbook group_vars/all 3
6	inventory group_vars/* 3
7	playbook group_vars/* 3
8	inventory file or script host vars 2
9	inventory host_vars/* 3
10	playbook host_vars/* 3
11	host facts / cached set_facts 4
12	play vars
13	play vars_prompt
14	play vars_files
15	role vars (as defined in Role directory structure)
16	block vars (only for tasks in block)
17	task vars (only for the task)
18	include_vars
19	set_facts / registered vars
20	role (and include_role) params
21	include params
22	extra vars (for example, -e "user=my_user")(always win precedence)


--- Inventory File ---

localhost ansible_connection=local nameserver_ip=8.8.8.8 snmp_port=160-161
node01 ansible_host=node01 ansible_ssh_pass=caleston123
node02 ansible_host=node02 ansible_ssh_pass=caleston123
[web_nodes]
node01
node02

[all:vars]
app_list=['vim', 'sqlite', 'jq']
user_details={'username': 'admin', 'password': 'secret_pass', 'email': 'admin@example.com'}

--- playbook.yaml ---

---
- name: 'Add nameserver in resolv.conf file on localhost'
  hosts: localhost
  become: yes
  tasks:
    - name: 'Add nameserver in resolv.conf file'
      lineinfile:
        path: /tmp/resolv.conf
        line: 'nameserver {{  nameserver_ip  }}'
    - name: 'Disable SNMP Port'
      firewalld:
        port: '{{ snmp_port }}'
        permanent: true
        state: disabled
		
--- Define and Calling Variables ---

---
- hosts: localhost
  vars:
    car_model: 'BMW M3'
    country_name: USA
    title: 'Systems Engineer'
  tasks:
    - command: 'echo "My car is {{ car_model }}"'
    - command: 'echo "I live in the {{ country_name }}"'
    - command: 'echo "I work as a {{ title }}"'
		

--- installing a list of packages on a remote server (list of packages are in inventory) ---

--- Inventory File ---

localhost ansible_connection=local nameserver_ip=8.8.8.8 snmp_port=160-161
node01 ansible_host=node01 ansible_ssh_pass=caleston123
node02 ansible_host=node02 ansible_ssh_pass=caleston123
[web_nodes]
node01
node02

[all:vars]
app_list=['vim', 'sqlite', 'jq']
user_details={'username': 'admin', 'password': 'secret_pass', 'email': 'admin@example.com'}

--- app_install.yaml ---

---
- hosts: all
  become: yes
  tasks:
    - name: Install applications
      yum:
        name: "{{ item }}"
        state: present
      with_items:
        - "{{ app_list }}"


--- setting up a new user on a remote server(s) (user details are in inventory) ---

--- Inventory File ---

localhost ansible_connection=local nameserver_ip=8.8.8.8 snmp_port=160-161
node01 ansible_host=node01 ansible_ssh_pass=caleston123
node02 ansible_host=node02 ansible_ssh_pass=caleston123
[web_nodes]
node01
node02

[all:vars]
app_list=['vim', 'sqlite', 'jq']
user_details={'username': 'admin', 'password': 'secret_pass', 'email': 'admin@example.com'}


--- user_setup.yaml ---

---
- hosts: all
  become: yes
  tasks:
    - name: Set up user
      user:
        name: "{{ user_details.username }}"
        password: "{{ user_details.password }}"
        comment: "{{ user_details.email }}"
        state: present
		

-> Ansible Playbooks

- Playbook - A single yaml file
	- Play - Defines a set of activities (task) to be run on hosts
	- Task - An action to be performed on the host
		- Execute a command
		- Run a script
		- install a package
		- Shutdown/Restart
	

-> Verifying Playbooks

1) Check Mode
- Asible's "dry run" where no actual changes are made on hosts
- Allows preview of playbook changes without applying them
- Use the --check option to run a playbook in check mode
- #ansibe-playbook istall_nginx.yml --check

2) Diff Mode
- Provides a before and after comparison of playbook changes
- Understand and verify the impact of playbook changes before applying them
- Utilize the --diff option to run a playbook in diff mode
- #ansibe-playbook istall_nginx.yml --check --diff

-> Syntax Check
- Ensure playbook syntax is error-free
- Use the --syntax-check option
- #ansibe-playbook istall_nginx.yml --syntax-check


-> Ansible-lint
- Ansible Lint is command-line tool that performs linting on Ansible playbooks, roles, and collections.
- It check your code for potential error, bugs, stylistic errors, and suspicious construct.
- It's akin to having a seasoned Ansible mentor guiding you, providing valuable insights, and catching issues that might have slipped past your notice.


-> Ansible Conditionals

1) Conditional -when

---
-  name: 'Execute a script on all web server nodes'
   hosts: all
   become: yes
   tasks:
     -  service: 'name=nginx state=started'
        when: 'ansible_host=="node02"'
		

---
- name: 'Am I an Adult or a Child?'
  hosts: localhost
  vars:
    age: 25
  tasks:
    - name: I am a Child
      command: 'echo "I am a Child"'
      when: 'age < 18'
    - name: I am an Adult
      command: 'echo "I am an Adult"'
      when: 'age >= 18'
	  
	  
---
- name: 'Add name server entry if not already entered'
  hosts: localhost
  become: yes
  tasks:
    - shell: 'cat /etc/resolv.conf'
      register: command_output
    - shell: 'echo "nameserver 10.0.250.10" >> /etc/resolv.conf'
      when: 'command_output.stdout.find("10.0.250.10") == -1'
	  

-> Ansible Loops (in older ansible use with_items like with_{operation name} as many more)
- loop is a array of string values / array of dictionary

---
-  name: 'Print list of fruits'
   hosts: localhost
   vars:
     fruits:
       - Apple
       - Banana
       - Grapes
       - Orange
   tasks:
     - command: 'echo "{{ item }}"'
       with_items: '{{ fruits }}'
	   
	   
---
- name: 'Install required packages'
  hosts: localhost
  become: yes
  vars:
    packages:
      - httpd
      - make
      - vim
  tasks:
    - yum:
        name: '{{ item }}'
        state: present
      with_items: '{{ packages }}'
	  
	  
-> Ansible Modules

- System
- Commands
- Files
- Database
- Cloud
- Windows
- more...

---
- name: 'hosts'
  hosts: all
  become: yes
  tasks:
    - name: 'Execute a script'
      script: '/tmp/install_script.sh'
	  
	  
---
- name: 'hosts'
  hosts: all
  become: yes
  tasks:
    - name: 'Execute a script'
      script: '/tmp/install_script.sh'
    - name: 'Start httpd service'
      service:
        name: 'httpd'
        state: 'started'
		
		
---
- name: 'hosts'
  hosts: all
  become: yes
  tasks:
    - name: 'Execute a script'
      script: '/tmp/install_script.sh'
    - name: 'Start httpd service'
      service:
        name: 'httpd'
        state: 'started'
    - name: "Create or update index.html file."
      lineinfile:
        path: /var/www/html/index.html
        line: "Welcome to ansible-beginning course"
        create: true
		
		
---
- name: 'hosts'
  hosts: all
  become: yes
  tasks:
    - name: 'Execute a script'
      script: '/tmp/install_script.sh'
    - name: 'Start httpd service'
      service:
        name: 'httpd'
        state: 'started'
    - name: "Update /var/www/html/index.html"
      lineinfile:
        path: /var/www/html/index.html
        line: "Welcome to ansible-beginning course"
        create: true
    - name: 'Create a new user'
      user:
        name: 'web_user'
        uid: 1040
        group: 'developers'
		
		
-> Introduction to Handlers



-> Ansible Roles



-> Ansible Collections

---
- hosts: localhost
  tasks:
    - name: Install the networking_tools collection
      ansible.builtin.ansible_galaxy_collection:
        name: company_xyz.networking_tools
        source: https://galaxy.ansible.com

- hosts: switches
  collections:
    - company_xyz.networking_tools
  tasks:
    - name: Configure VLAN 10
      configure_vlan:
        vlan_id: 10
        vlan_name: Admin_VLAN
		
		






